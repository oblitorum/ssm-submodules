#!/bin/bash

set -o errexit
set -o xtrace
umask 0000

. $(dirname $0)/vars

usage () {
    cat <<EOF
Usage: $0 [OPTIONS]

    The following options may be given:
        --help) usage ;;

Example $0 ssm-client ssm-dashboards
EOF
        exit 1
}

build() {
    mkdir -p ${server_build_dir}/RPMS
    cp -r ${rpm_dir}/* ${server_build_dir}/RPMS
    cp ${root_dir}/build/ssm-server-docker/* ${server_build_dir}/

    docker run --rm -v ${server_build_dir}/RPMS:/home/builder/RPMS ${rpmbuild_docker_image} sh -c "
        set -o errexit
        set -o xtrace
        umask 0000

        createrepo_c --update /home/builder/RPMS
        # give host user permission
        find /home/builder/RPMS/ -type d -exec chmod 0777 {} \;
        find /home/builder/RPMS/ -type f -exec chmod 0666 {} \;
    "
    for rpm in $(cd ${rpm_dir}; find . -name '*.rpm'); do
        echo $rpm
        rpm_name=$(
            docker run --rm -v ${rpm_dir}:/home/builder/rpm -w /home/builder/rpm ${rpmbuild_docker_image} \
                rpm -q --qf '%{name}' -p $rpm
        )
        rpm_fullname=$(
            docker run --rm -v ${rpm_dir}:/home/builder/rpm -w /home/builder/rpm ${rpmbuild_docker_image} \
                rpm -q -p $rpm
        )
        sed -i -e "s/- ${rpm_name}$/- ${rpm_fullname}/" ${server_build_dir}/playbook-install.yml
    done

    local image_id_file=${tmp_dir}/ssm-server-image-id
    docker build --squash --no-cache --build-arg ssm_version=${ssm_version} --iidfile ${image_id_file} ${server_build_dir}/
    local image_id=$(cat ${image_id_file})

    # use clamd@scan service to scan the docker image
    local image_tar=${tmp_dir}/ssm-server-image.tar
    local image_dir=${tmp_dir}/ssm-server-image
    local cid=$(docker create ${image_id})
    docker export $cid -o ${image_tar}
    docker rm ${cid}
    mkdir -vp ${image_dir}
    rm -rf ${image_dir}/* && tar -C ${image_dir} -xf ${image_tar}

    mkdir -vp "${tmp_dir}"
    > ${tmp_dir}/ssm-server-clamdscan.log
    find ${image_dir} -type d -exec chmod 0777 {} \;
    find ${image_dir} -type f ! -executable -exec chmod 0666 {} \;
    find ${image_dir} -type f -executable -exec chmod 0777 {} \;
    find ${image_dir} -type f -print0 | xargs -0 -n1 -P$(nproc) clamdscan --multiscan --fdpass --no-summary >> ${tmp_dir}/ssm-server-clamdscan.log

    local log_file=${logs_dir}/security-audit-scanning.log
    local vt_files=${tmp_dir}/ssm-server-vt-files.log
    local vt_log=${tmp_dir}/ssm-server-vt.log
    mkdir -p "${logs_dir}"
    > ${log_file}
    > ${vt_files}
    > ${vt_log}

    # check rkhunter log file
    check_rkhunter_log ${image_dir}/var/log/ssm-server-rkhunter.log ${log_file} ${vt_files}
    rm -f ${image_dir}/var/log/ssm-server-rkhunter.log

    # check clamdscan log file
    echo $'\n' >> ${log_file}
    check_clamdscan_log ${tmp_dir}/ssm-server-clamdscan.log ${log_file} ${vt_files}
    rm -f ${tmp_dir}/ssm-server-clamdscan.log

    # check package checksum verification log file
    echo $'\n' >> ${log_file}
    check_rpm_verify_log ${image_dir}/var/log/ssm-server-rpm-verify.log ${log_file}
    rm -f ${image_dir}/var/log/ssm-server-rpm-verify.log

    # check orphan file scanning log file
    echo $'\n' >> ${log_file}
    check_orphan_file_log ${image_dir}/var/log/ssm-server-orphan-files.log ${log_file} ${vt_files}
    rm -f ${image_dir}/var/log/ssm-server-orphan-files.log

    # VirusTotal scanning
    i=0
    while [ $i -lt 100 ] && [ -s ${vt_files} ]; do
        sleep 10

        vt_hashes=()
        while read -r line; do
            vt_hashes+=("${line##* }")
        done < "${vt_files}"

        analysis_output="$(vt analysis ${vt_hashes[@]})"
        entity_count=$(cat "${vt_files}" | wc -l)
        entity=
        echo "$analysis_output" | tac | while read -r line; do
            entity="${line}"$'\n'"${entity}"
            if [[ "$line" =~ ^"- _id:" ]]; then
                if [[ "$entity" =~ "status: \"completed\"" ]]; then
                    file_hash=$(sed -n "${entity_count}p" "${vt_files}")
                    filename="${file_hash%% *}"
                    sed -i "${entity_count}d" ${vt_files}
                    if [[ "$entity" =~ (malicious|suspicious)': '[1-9] ]]; then
                        entity=$(echo "$entity" | sed "2 i\  _filename: ${filename##${image_dir}}")
                        echo "$entity" >> ${vt_log}
                    fi
                fi
                entity_count=$((entity_count-1))
            fi
        done
        i=$((i+1))
    done

    # vt scanning log file
    echo $'\n' >> ${log_file}
    check_vt_log "${vt_log}" ${log_file}
    rm -f "${vt_log}"

    if [ -z "${DOCKER_TAG}" ]; then
        docker tag ${image_id} shatteredsilicon/ssm-server:${ssm_version}
        docker tag ${image_id} shatteredsilicon/ssm-server:latest
    else
        docker tag ${image_id} ${DOCKER_TAG}
    fi
}

check_rkhunter_log() {
    local log_file=$1
    local dest_file=$2
    local vt_files=$3

    echo $'rkhunter scanning\n=================\n' >> "$dest_file"

    if [ -s "$log_file" ]; then
        while read -r line; do
            if [ -z "$line" ] || [[ "$line" =~ ^[[:space:]]+$ ]]; then
                break
            fi

            echo "$line" >> "$dest_file"
            local filename=$(echo "$line" | grep -oP '(?<=\[\d{2}:\d{2}:\d{2}\])\s*/.*(?=\s+\[ Warning \])' | awk '{$1=$1};1')
            if [ -f "${image_dir}${filename}" ] && [ -s "${image_dir}${filename}" ]; then
                vt scan file "${image_dir}${filename}" >> "${vt_files}"
            fi
        done < "$log_file"
    fi
}

check_clamdscan_log() {
    local log_file=$1
    local dest_file=$2
    local vt_files=$3

    echo $'clamav scanning\n===============\n' >> "$dest_file"

    while read -r line; do
        if ! [[ "$line" =~ ': OK'$ ]]; then
            echo "$line" >> "$dest_file"
            local filename=$(echo ${line%%': '*} | awk '{$1=$1};1')
            if [ -f "${image_dir}${filename}" ] && [ -s "${image_dir}${filename}" ]; then
                vt scan file "${image_dir}${filename}" >> "${vt_files}"
            fi
        fi
    done < "$log_file"
}

check_rpm_verify_log() {
    local log_file=$1
    local dest_file=$2

    echo $'package checksum verification\n=============================\n' >> "$dest_file"
    if [ -s "$log_file" ]; then
        cat "$log_file" >> "$dest_file"
    fi
}

check_orphan_file_log() {
    local log_file=$1
    local dest_file=$2
    local vt_files=$3

    echo $'orphan file scanning\n====================\n' >> "$dest_file"

    if [ -s "$log_file" ]; then
        cat "$log_file" >> "$dest_file"
        while read -r line; do
            if [ -f "${image_dir}${line}" ] && [ -s "${image_dir}${line}" ]; then
                vt scan file "${image_dir}${line}" >> "${vt_files}"
            fi
        done < "$log_file"
    fi
}

check_vt_log() {
    local log_file=$1
    local dest_file=$2

    echo $'vt scanning\n===========' >> "$dest_file"
    if [ -s "$log_file" ]; then
        cat "$log_file" >> "$dest_file"
    fi
}

main() {
    declare -a TMP_PACKAGES

    for arg do
        val=`echo "$arg" | sed -e 's;^--[^=]*=;;'`
        case "$arg" in
            *)              usage ;;
        esac
    done

    mkdir -vp "${tmp_dir}"
    VERSION=${VERSION:-$(cd ${root_dir}; git tag -l --sort=-version:refname "v*" --merged | head -n 1)}
    build
}

main $@
